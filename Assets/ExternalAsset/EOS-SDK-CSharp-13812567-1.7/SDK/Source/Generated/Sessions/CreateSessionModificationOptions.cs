// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Sessions
{
	/// <summary>
	/// Input parameters for the <see cref="SessionsInterface.CreateSessionModification" /> Function.
	/// </summary>
	public class CreateSessionModificationOptions
	{
		/// <summary>
		/// Version of the API
		/// </summary>
		public int ApiVersion { get { return 2; } }

		/// <summary>
		/// Name of the session to create
		/// </summary>
		public string SessionName { get; set; }

		/// <summary>
		/// Bucket id associated with the session
		/// </summary>
		public string BucketId { get; set; }

		/// <summary>
		/// Maximum number of players allowed in the session
		/// </summary>
		public uint MaxPlayers { get; set; }

		/// <summary>
		/// Local user id associated with the session
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// If true than this session will be used as the session associated with presence.
		/// Only one session at a time can have this flag true.
		/// </summary>
		public bool PresenceEnabled { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct CreateSessionModificationOptionsInternal : IDisposable
	{
		private int m_ApiVersion;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_SessionName;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_BucketId;
		private uint m_MaxPlayers;
		private IntPtr m_LocalUserId;
		private int m_PresenceEnabled;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public string SessionName
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_SessionName, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_SessionName, value); }
		}

		public string BucketId
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_BucketId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_BucketId, value); }
		}

		public uint MaxPlayers
		{
			get
			{
				var value = Helper.GetDefault<uint>();
				Helper.TryMarshalGet(m_MaxPlayers, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_MaxPlayers, value); }
		}

		public ProductUserId LocalUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_LocalUserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_LocalUserId, value); }
		}

		public bool PresenceEnabled
		{
			get
			{
				var value = Helper.GetDefault<bool>();
				Helper.TryMarshalGet(m_PresenceEnabled, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_PresenceEnabled, value); }
		}

		public void Dispose()
		{
		}
	}
}