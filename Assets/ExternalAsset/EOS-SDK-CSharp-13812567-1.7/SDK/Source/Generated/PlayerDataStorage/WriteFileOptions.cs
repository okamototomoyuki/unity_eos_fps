// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.PlayerDataStorage
{
	/// <summary>
	/// Input data for the <see cref="PlayerDataStorageInterface.WriteFile" /> function
	/// </summary>
	public class WriteFileOptions
	{
		/// <summary>
		/// API Version for the <see cref="WriteFileOptions" /> struct
		/// </summary>
		public int ApiVersion { get { return 1; } }

		/// <summary>
		/// The Account ID of the local user who is writing the requested file
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The file name to written to; if this file already exists, the contents will be replaced if the write request completes successfully
		/// </summary>
		public string Filename { get; set; }

		/// <summary>
		/// Requested maximum amount of data in bytes that can be written to the file per tick
		/// </summary>
		public uint ChunkLengthBytes { get; set; }

		/// <summary>
		/// Callback function to handle copying data into the DataBuffer to be written into the requested file
		/// </summary>
		public OnWriteFileDataCallback WriteFileDataCallback { get; set; }

		/// <summary>
		/// Optional callback function to be informed of upload progress, if any
		/// </summary>
		public OnFileTransferProgressCallback FileTransferProgressCallback { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct WriteFileOptionsInternal : IDisposable, IInitializable
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_Filename;
		private uint m_ChunkLengthBytes;
		private OnWriteFileDataCallbackInternal m_WriteFileDataCallback;
		private OnFileTransferProgressCallbackInternal m_FileTransferProgressCallback;

		public void Initialize()
		{
			 m_WriteFileDataCallback = new OnWriteFileDataCallbackInternal(PlayerDataStorageInterface.OnWriteFileData);
			 m_FileTransferProgressCallback = new OnFileTransferProgressCallbackInternal(PlayerDataStorageInterface.OnFileTransferProgress);
		}

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public ProductUserId LocalUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_LocalUserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_LocalUserId, value); }
		}

		public string Filename
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_Filename, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_Filename, value); }
		}

		public uint ChunkLengthBytes
		{
			get
			{
				var value = Helper.GetDefault<uint>();
				Helper.TryMarshalGet(m_ChunkLengthBytes, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ChunkLengthBytes, value); }
		}

		public OnWriteFileDataCallbackInternal WriteFileDataCallback
		{
			get { return m_WriteFileDataCallback; }
		}

		public OnFileTransferProgressCallbackInternal FileTransferProgressCallback
		{
			get { return m_FileTransferProgressCallback; }
		}

		public void Dispose()
		{
		}
	}
}