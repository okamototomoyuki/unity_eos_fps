// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Achievements
{
	/// <summary>
	/// Input parameters for the <see cref="AchievementsInterface.QueryDefinitions" /> Function.
	/// </summary>
	public class QueryDefinitionsOptions
	{
		/// <summary>
		/// API Version.
		/// </summary>
		public int ApiVersion { get { return 1; } }

		/// <summary>
		/// Product User ID for user who is querying definitions, if not valid default text will be returned.
		/// </summary>
		public ProductUserId UserId { get; set; }

		/// <summary>
		/// Epic account ID for user who is querying definitions, if not valid default text will be returned.
		/// </summary>
		public EpicAccountId EpicUserId { get; set; }

		/// <summary>
		/// An array of Achievement IDs for hidden achievements to get full details for.
		/// </summary>
		public string[] HiddenAchievementIds { get; set; }

	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct QueryDefinitionsOptionsInternal : IDisposable
	{
		private int m_ApiVersion;
		private IntPtr m_UserId;
		private IntPtr m_EpicUserId;
		private IntPtr m_HiddenAchievementIds;
		private uint m_HiddenAchievementsCount;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public ProductUserId UserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_UserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_UserId, value); }
		}

		public EpicAccountId EpicUserId
		{
			get
			{
				var value = Helper.GetDefault<EpicAccountId>();
				Helper.TryMarshalGet(m_EpicUserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_EpicUserId, value); }
		}

		public string[] HiddenAchievementIds
		{
			get
			{
				var value = Helper.GetDefault<string[]>();
				Helper.TryMarshalGet(m_HiddenAchievementIds, out value, m_HiddenAchievementsCount);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_HiddenAchievementIds, value, out m_HiddenAchievementsCount); }
		}


		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_HiddenAchievementIds);
		}
	}
}