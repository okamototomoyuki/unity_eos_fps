// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Lobby
{
	/// <summary>
	/// Input parameters for the <see cref="LobbyInterface.CreateLobby" /> Function.
	/// </summary>
	public class CreateLobbyOptions
	{
		/// <summary>
		/// Version of the API
		/// </summary>
		public int ApiVersion { get { return 2; } }

		/// <summary>
		/// Local user creating the lobby
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// Max members allowed in the lobby
		/// </summary>
		public uint MaxLobbyMembers { get; set; }

		/// <summary>
		/// The initial permission level of the lobby
		/// </summary>
		public LobbyPermissionLevel PermissionLevel { get; set; }

		/// <summary>
		/// If true then this lobby will be used as the one lobby associated with presence.
		/// Only one lobby at a time can have this flag true.
		/// </summary>
		public bool PresenceEnabled { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct CreateLobbyOptionsInternal : IDisposable
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private uint m_MaxLobbyMembers;
		private LobbyPermissionLevel m_PermissionLevel;
		private int m_PresenceEnabled;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public ProductUserId LocalUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_LocalUserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_LocalUserId, value); }
		}

		public uint MaxLobbyMembers
		{
			get
			{
				var value = Helper.GetDefault<uint>();
				Helper.TryMarshalGet(m_MaxLobbyMembers, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_MaxLobbyMembers, value); }
		}

		public LobbyPermissionLevel PermissionLevel
		{
			get
			{
				var value = Helper.GetDefault<LobbyPermissionLevel>();
				Helper.TryMarshalGet(m_PermissionLevel, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_PermissionLevel, value); }
		}

		public bool PresenceEnabled
		{
			get
			{
				var value = Helper.GetDefault<bool>();
				Helper.TryMarshalGet(m_PresenceEnabled, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_PresenceEnabled, value); }
		}

		public void Dispose()
		{
		}
	}
}