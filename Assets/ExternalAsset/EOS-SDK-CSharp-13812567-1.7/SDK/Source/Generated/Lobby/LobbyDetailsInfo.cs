// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Lobby
{
	public class LobbyDetailsInfo
	{
		/// <summary>
		/// Version of the API
		/// </summary>
		public int ApiVersion { get { return 1; } }

		/// <summary>
		/// Lobby id
		/// </summary>
		public string LobbyId { get; set; }

		/// <summary>
		/// Current owner of the lobby
		/// </summary>
		public ProductUserId LobbyOwnerUserId { get; set; }

		/// <summary>
		/// Permission level of the lobby
		/// </summary>
		public LobbyPermissionLevel PermissionLevel { get; set; }

		/// <summary>
		/// Current available space
		/// </summary>
		public uint AvailableSlots { get; set; }

		/// <summary>
		/// Max allowed members in the lobby
		/// </summary>
		public uint MaxMembers { get; set; }

		/// <summary>
		/// Are invites allowed
		/// </summary>
		public bool AllowInvites { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct LobbyDetailsInfoInternal : IDisposable
	{
		private int m_ApiVersion;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_LobbyId;
		private IntPtr m_LobbyOwnerUserId;
		private LobbyPermissionLevel m_PermissionLevel;
		private uint m_AvailableSlots;
		private uint m_MaxMembers;
		private int m_AllowInvites;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public string LobbyId
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_LobbyId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_LobbyId, value); }
		}

		public ProductUserId LobbyOwnerUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_LobbyOwnerUserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_LobbyOwnerUserId, value); }
		}

		public LobbyPermissionLevel PermissionLevel
		{
			get
			{
				var value = Helper.GetDefault<LobbyPermissionLevel>();
				Helper.TryMarshalGet(m_PermissionLevel, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_PermissionLevel, value); }
		}

		public uint AvailableSlots
		{
			get
			{
				var value = Helper.GetDefault<uint>();
				Helper.TryMarshalGet(m_AvailableSlots, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_AvailableSlots, value); }
		}

		public uint MaxMembers
		{
			get
			{
				var value = Helper.GetDefault<uint>();
				Helper.TryMarshalGet(m_MaxMembers, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_MaxMembers, value); }
		}

		public bool AllowInvites
		{
			get
			{
				var value = Helper.GetDefault<bool>();
				Helper.TryMarshalGet(m_AllowInvites, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_AllowInvites, value); }
		}

		public void Dispose()
		{
		}
	}
}