// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.UI
{
	public sealed class UIInterface : Handle
	{
		public UIInterface() : base(IntPtr.Zero)
		{
		}

		public UIInterface(IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// ID representing a specific UI event.
		/// </summary>
		public const int EventidInvalid = 0;

		/// <summary>
		/// Opens the overlay with a request to show the friends list.
		/// </summary>
		/// <param name="options">Structure containing the account id of the friends list to show.</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate.</param>
		/// <param name="completionDelegate">A callback that is fired when the request to show the friends list has been sent to the overlay, or on an error.</param>
		/// <returns>
		/// <see cref="Result.Success" /> If the overlay has been notified about the request.
		/// <see cref="Result.InvalidParameters" /> If any of the options are incorrect.
		/// <see cref="Result.NotConfigured" /> If the overlay is not properly configured.
		/// <see cref="Result.NoChange" /> If the overlay is already visible.
		/// </returns>
		public void ShowFriends(ShowFriendsOptions options, object clientData, OnShowFriendsCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<ShowFriendsOptionsInternal>(options);

			var completionDelegateInternal = new OnShowFriendsCallbackInternal(OnShowFriends);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_UI_ShowFriends(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Hides the active overlay.
		/// </summary>
		/// <param name="options">Structure containing the account id of the browser to close.</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate.</param>
		/// <param name="completionDelegate">A callback that is fired when the request to hide the friends list has been processed, or on an error.</param>
		/// <returns>
		/// <see cref="Result.Success" /> If the overlay has been notified about the request.
		/// <see cref="Result.InvalidParameters" /> If any of the options are incorrect.
		/// <see cref="Result.NotConfigured" /> If the overlay is not properly configured.
		/// <see cref="Result.NoChange" /> If the overlay is already hidden.
		/// </returns>
		public void HideFriends(HideFriendsOptions options, object clientData, OnHideFriendsCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<HideFriendsOptionsInternal>(options);

			var completionDelegateInternal = new OnHideFriendsCallbackInternal(OnHideFriends);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_UI_HideFriends(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Gets the friends overlay visibility.
		/// </summary>
		/// <param name="options">Structure containing the account id of the overlay owner.</param>
		/// <returns>
		/// 1 If the overlay is visible.
		/// </returns>
		public bool GetFriendsVisible(GetFriendsVisibleOptions options)
		{
			var optionsInternal = Helper.CopyProperties<GetFriendsVisibleOptionsInternal>(options);

			var funcResult = EOS_UI_GetFriendsVisible(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<bool>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Updates the current Toggle Friends Key. This key can be used by the user to toggle the friends
		/// overlay when available. The default value represents `Shift + F3` as `((int32_t)<see cref="KeyCombination.Shift" /> | (int32_t)<see cref="KeyCombination.F3" />)`.
		/// The provided key should satisfy <see cref="IsValidKeyCombination" />. The value <see cref="KeyCombination.None" /> is specially handled
		/// by resetting the key binding to the system default.
		/// <seealso cref="IsValidKeyCombination" />
		/// </summary>
		/// <param name="options">Structure containing the key combination to use.</param>
		/// <returns>
		/// <see cref="Result.Success" /> If the overlay has been notified about the request.
		/// <see cref="Result.InvalidParameters" /> If any of the options are incorrect.
		/// <see cref="Result.NotConfigured" /> If the overlay is not properly configured.
		/// <see cref="Result.NoChange" /> If the key combination did not change.
		/// </returns>
		public Result SetToggleFriendsKey(SetToggleFriendsKeyOptions options)
		{
			var optionsInternal = Helper.CopyProperties<SetToggleFriendsKeyOptionsInternal>(options);

			var funcResult = EOS_UI_SetToggleFriendsKey(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Returns the current Toggle Friends Key. This key can be used by the user to toggle the friends
		/// overlay when available. The default value represents `Shift + F3` as `((int32_t)<see cref="KeyCombination.Shift" /> | (int32_t)<see cref="KeyCombination.F3" />)`.
		/// </summary>
		/// <param name="options">Structure containing any options that are needed to retrieve the key.</param>
		/// <returns>
		/// A valid key combination which represent a single key with zero or more modifier keys.
		/// <see cref="KeyCombination.None" /> will be returned if any error occurs.
		/// </returns>
		public KeyCombination GetToggleFriendsKey(GetToggleFriendsKeyOptions options)
		{
			var optionsInternal = Helper.CopyProperties<GetToggleFriendsKeyOptionsInternal>(options);

			var funcResult = EOS_UI_GetToggleFriendsKey(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<KeyCombination>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Determine if a key combination is valid. A key combinations must have a single key and at least one modifier.
		/// The single key must be one of the following: F1 through F12, Space, Backspace, Escape, or Tab.
		/// The modifier key must be one or more of the following: Shift, Control, or Alt.
		/// </summary>
		/// <param name="keyCombination">The key to test.</param>
		/// <returns>
		/// 1 if the provided key combination is valid.
		/// </returns>
		public bool IsValidKeyCombination(KeyCombination keyCombination)
		{
			var funcResult = EOS_UI_IsValidKeyCombination(InnerHandle, keyCombination);
			var funcResultReturn = Helper.GetDefault<bool>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Define any preferences for any display settings.
		/// </summary>
		/// <param name="options">Structure containing any options that are needed to set</param>
		/// <returns>
		/// <see cref="Result.Success" /> If the overlay has been notified about the request.
		/// <see cref="Result.InvalidParameters" /> If any of the options are incorrect.
		/// <see cref="Result.NotConfigured" /> If the overlay is not properly configured.
		/// <see cref="Result.NoChange" /> If the preferences did not change.
		/// </returns>
		public Result SetDisplayPreference(SetDisplayPreferenceOptions options)
		{
			var optionsInternal = Helper.CopyProperties<SetDisplayPreferenceOptionsInternal>(options);

			var funcResult = EOS_UI_SetDisplayPreference(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Returns the current notification location display preference.
		/// </summary>
		/// <returns>
		/// The current notification location display preference.
		/// </returns>
		public NotificationLocation GetNotificationLocationPreference()
		{
			var funcResult = EOS_UI_GetNotificationLocationPreference(InnerHandle);
			var funcResultReturn = Helper.GetDefault<NotificationLocation>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Lets the SDK know that the given UI event ID has been acknowledged and should be released.
		/// <seealso cref="Presence.JoinGameAcceptedCallbackInfo" />
		/// </summary>
		/// <returns>
		/// An <see cref="Result" /> is returned to indicate success or an error.
		/// 
		/// <see cref="Result.Success" /> is returned if the UI event ID has been acknowledged.
		/// <see cref="Result.NotFound" /> is returned if the UI event ID does not exist.
		/// </returns>
		public Result AcknowledgeEventId(AcknowledgeEventIdOptions options)
		{
			var optionsInternal = Helper.CopyProperties<AcknowledgeEventIdOptionsInternal>(options);

			var funcResult = EOS_UI_AcknowledgeEventId(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		[MonoPInvokeCallback]
		internal static void OnHideFriends(IntPtr address)
		{
			OnHideFriendsCallback callback = null;
			HideFriendsCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnHideFriendsCallback, HideFriendsCallbackInfoInternal, HideFriendsCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnShowFriends(IntPtr address)
		{
			OnShowFriendsCallback callback = null;
			ShowFriendsCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnShowFriendsCallback, ShowFriendsCallbackInfoInternal, ShowFriendsCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_UI_AcknowledgeEventId(IntPtr handle, ref AcknowledgeEventIdOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern NotificationLocation EOS_UI_GetNotificationLocationPreference(IntPtr handle);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_UI_SetDisplayPreference(IntPtr handle, ref SetDisplayPreferenceOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern int EOS_UI_IsValidKeyCombination(IntPtr handle, KeyCombination keyCombination);

		[DllImport(Config.BinaryName)]
		private static extern KeyCombination EOS_UI_GetToggleFriendsKey(IntPtr handle, ref GetToggleFriendsKeyOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_UI_SetToggleFriendsKey(IntPtr handle, ref SetToggleFriendsKeyOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern int EOS_UI_GetFriendsVisible(IntPtr handle, ref GetFriendsVisibleOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_UI_HideFriends(IntPtr handle, ref HideFriendsOptionsInternal options, IntPtr clientData, OnHideFriendsCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_UI_ShowFriends(IntPtr handle, ref ShowFriendsOptionsInternal options, IntPtr clientData, OnShowFriendsCallbackInternal completionDelegate);
	}
}